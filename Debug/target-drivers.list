
target-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ba8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d3c  08000d3c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d3c  08000d3c  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08000d3c  08000d3c  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d3c  08000d3c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d3c  08000d3c  00010d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d40  08000d40  00010d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08000d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000034  08000d78  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000d78  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001785  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005fd  00000000  00000000  000217e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a8  00000000  00000000  00021de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000170  00000000  00000000  00021f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029c1  00000000  00000000  00022100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001dd5  00000000  00000000  00024ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a88d  00000000  00000000  00026896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00031123  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000624  00000000  00000000  00031174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000034 	.word	0x20000034
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d24 	.word	0x08000d24

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000038 	.word	0x20000038
 80001d0:	08000d24 	.word	0x08000d24

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <delay>:

void I2C1_GPIOInits(void);
void GPIO_ButtonInit(void);
void I2C1_Inits(void);

void delay(void){
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
	for (uint32_t i=0; i<500000; i++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e002      	b.n	80001f6 <delay+0x12>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <delay+0x28>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d9f8      	bls.n	80001f0 <delay+0xc>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	0007a11f 	.word	0x0007a11f

08000210 <main>:

I2C_Handle_t I2C1Handle;
uint8_t some_data[] = "We are testing I2C master Tx\n"; //must be less than 32 bytes

int main (void){
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af02      	add	r7, sp, #8
	GPIO_ButtonInit(); ////Initialize GPIO pin for B1
 8000216:	f000 f865 	bl	80002e4 <GPIO_ButtonInit>

	I2C1_GPIOInits(); //Initialize GPIO pins to behave as I2C1 pins
 800021a:	f000 f827 	bl	800026c <I2C1_GPIOInits>
	I2C1_Inits(); //Initialize the I2C1 peripheral parameters
 800021e:	f000 f847 	bl	80002b0 <I2C1_Inits>
	I2C_PeripheralControl(I2C1, ENABLE);
 8000222:	2101      	movs	r1, #1
 8000224:	480d      	ldr	r0, [pc, #52]	; (800025c <main+0x4c>)
 8000226:	f000 fc62 	bl	8000aee <I2C_PeripheralControl>



	while(1){
		while(GPIO_Read(GPIOC, GPIO_PIN_NO_13));
 800022a:	bf00      	nop
 800022c:	210d      	movs	r1, #13
 800022e:	480c      	ldr	r0, [pc, #48]	; (8000260 <main+0x50>)
 8000230:	f000 faa4 	bl	800077c <GPIO_Read>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f8      	bne.n	800022c <main+0x1c>

		delay();
 800023a:	f7ff ffd3 	bl	80001e4 <delay>
		I2C_MasterSendData(&I2C1Handle, some_data, strlen((char*)some_data), SLAVE_ADDR, 0);
 800023e:	4809      	ldr	r0, [pc, #36]	; (8000264 <main+0x54>)
 8000240:	f7ff ffc8 	bl	80001d4 <strlen>
 8000244:	4602      	mov	r2, r0
 8000246:	2300      	movs	r3, #0
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2378      	movs	r3, #120	; 0x78
 800024c:	4905      	ldr	r1, [pc, #20]	; (8000264 <main+0x54>)
 800024e:	4806      	ldr	r0, [pc, #24]	; (8000268 <main+0x58>)
 8000250:	f000 fbc6 	bl	80009e0 <I2C_MasterSendData>
		delay();
 8000254:	f7ff ffc6 	bl	80001e4 <delay>
		while(GPIO_Read(GPIOC, GPIO_PIN_NO_13));
 8000258:	e7e7      	b.n	800022a <main+0x1a>
 800025a:	bf00      	nop
 800025c:	40005400 	.word	0x40005400
 8000260:	40020800 	.word	0x40020800
 8000264:	20000000 	.word	0x20000000
 8000268:	20000050 	.word	0x20000050

0800026c <I2C1_GPIOInits>:
	}

}

void I2C1_GPIOInits(void){
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <I2C1_GPIOInits+0x40>)
 8000274:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000276:	2302      	movs	r3, #2
 8000278:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_OD;
 800027a:	2301      	movs	r3, #1
 800027c:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800027e:	2301      	movs	r3, #1
 8000280:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000282:	2304      	movs	r3, #4
 8000284:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000286:	2302      	movs	r3, #2
 8000288:	72bb      	strb	r3, [r7, #10]
	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 800028a:	2308      	movs	r3, #8
 800028c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f8f1 	bl	8000478 <GPIO_Init>
	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000296:	2309      	movs	r3, #9
 8000298:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f8eb 	bl	8000478 <GPIO_Init>
}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40020400 	.word	0x40020400

080002b0 <I2C1_Inits>:

void I2C1_Inits(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <I2C1_Inits+0x28>)
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <I2C1_Inits+0x2c>)
 80002b8:	601a      	str	r2, [r3, #0]
	//I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
	I2C1Handle.I2C_Config.I2C_ACKControl = ENABLE;
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <I2C1_Inits+0x28>)
 80002bc:	2201      	movs	r2, #1
 80002be:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDRESS; //Master address (not slave)
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <I2C1_Inits+0x28>)
 80002c2:	2261      	movs	r2, #97	; 0x61
 80002c4:	721a      	strb	r2, [r3, #8]
	//I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2; // Does't matter since its SM
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <I2C1_Inits+0x28>)
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <I2C1_Inits+0x30>)
 80002ca:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <I2C1_Inits+0x28>)
 80002ce:	f000 fac3 	bl	8000858 <I2C_Init>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000050 	.word	0x20000050
 80002dc:	40005400 	.word	0x40005400
 80002e0:	000186a0 	.word	0x000186a0

080002e4 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t B1;

	//B1 configuration
	B1.pGPIOx = GPIOC;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <GPIO_ButtonInit+0x2c>)
 80002ec:	607b      	str	r3, [r7, #4]
	B1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ee:	230d      	movs	r3, #13
 80002f0:	723b      	strb	r3, [r7, #8]
	B1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002f2:	2300      	movs	r3, #0
 80002f4:	727b      	strb	r3, [r7, #9]
	B1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002f6:	2302      	movs	r3, #2
 80002f8:	72bb      	strb	r3, [r7, #10]
	B1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; //It has an external PU
 80002fa:	2300      	movs	r3, #0
 80002fc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&B1);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f8b9 	bl	8000478 <GPIO_Init>
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40020800 	.word	0x40020800

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 fccb 	bl	8000cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ff63 	bl	8000210 <main>

0800034a <LoopForever>:

LoopForever:
    b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000358:	08000d44 	.word	0x08000d44
  ldr r2, =_sbss
 800035c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000360:	20000078 	.word	0x20000078

08000364 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <GPIO_PeriClkCtrl>:
 *
 *	@param	*pGPIOx -> pointer to GPIOx address (structure GPIO_RegDef_t type)
 *	@param	EnOrDi can be ENABLE or DISABLE
 *	@return void type
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d136      	bne.n	80003e8 <GPIO_PeriClkCtrl+0x80>
		if(pGPIOx == GPIOA){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a38      	ldr	r2, [pc, #224]	; (8000460 <GPIO_PeriClkCtrl+0xf8>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 8000382:	4b38      	ldr	r3, [pc, #224]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a37      	ldr	r2, [pc, #220]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOE){
			GPIOE_PCLK_DI();
		}
	}
}
 800038e:	e061      	b.n	8000454 <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOB){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a35      	ldr	r2, [pc, #212]	; (8000468 <GPIO_PeriClkCtrl+0x100>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000398:	4b32      	ldr	r3, [pc, #200]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a31      	ldr	r2, [pc, #196]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 800039e:	f043 0302 	orr.w	r3, r3, #2
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e056      	b.n	8000454 <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOC){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a30      	ldr	r2, [pc, #192]	; (800046c <GPIO_PeriClkCtrl+0x104>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 80003ae:	4b2d      	ldr	r3, [pc, #180]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a2c      	ldr	r2, [pc, #176]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e04b      	b.n	8000454 <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOD){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a2c      	ldr	r2, [pc, #176]	; (8000470 <GPIO_PeriClkCtrl+0x108>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a26      	ldr	r2, [pc, #152]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e040      	b.n	8000454 <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOE){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a27      	ldr	r2, [pc, #156]	; (8000474 <GPIO_PeriClkCtrl+0x10c>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d13c      	bne.n	8000454 <GPIO_PeriClkCtrl+0xec>
			GPIOE_PCLK_EN();
 80003da:	4b22      	ldr	r3, [pc, #136]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a21      	ldr	r2, [pc, #132]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 80003e0:	f043 0310 	orr.w	r3, r3, #16
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e035      	b.n	8000454 <GPIO_PeriClkCtrl+0xec>
		if(pGPIOx == GPIOA){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <GPIO_PeriClkCtrl+0xf8>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClkCtrl+0x96>
			GPIOA_PCLK_DI();
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e02a      	b.n	8000454 <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOB){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a19      	ldr	r2, [pc, #100]	; (8000468 <GPIO_PeriClkCtrl+0x100>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClkCtrl+0xac>
			GPIOB_PCLK_DI();
 8000406:	4b17      	ldr	r3, [pc, #92]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a16      	ldr	r2, [pc, #88]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 800040c:	f023 0302 	bic.w	r3, r3, #2
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e01f      	b.n	8000454 <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOC){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a15      	ldr	r2, [pc, #84]	; (800046c <GPIO_PeriClkCtrl+0x104>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClkCtrl+0xc2>
			GPIOC_PCLK_DI();
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a10      	ldr	r2, [pc, #64]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 8000422:	f023 0304 	bic.w	r3, r3, #4
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e014      	b.n	8000454 <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOD){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a10      	ldr	r2, [pc, #64]	; (8000470 <GPIO_PeriClkCtrl+0x108>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClkCtrl+0xd8>
			GPIOD_PCLK_DI();
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 8000438:	f023 0308 	bic.w	r3, r3, #8
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e009      	b.n	8000454 <GPIO_PeriClkCtrl+0xec>
		} else if (pGPIOx == GPIOE){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a0c      	ldr	r2, [pc, #48]	; (8000474 <GPIO_PeriClkCtrl+0x10c>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d105      	bne.n	8000454 <GPIO_PeriClkCtrl+0xec>
			GPIOE_PCLK_DI();
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <GPIO_PeriClkCtrl+0xfc>)
 800044e:	f023 0310 	bic.w	r3, r3, #16
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40020000 	.word	0x40020000
 8000464:	40023800 	.word	0x40023800
 8000468:	40020400 	.word	0x40020400
 800046c:	40020800 	.word	0x40020800
 8000470:	40020c00 	.word	0x40020c00
 8000474:	40021000 	.word	0x40021000

08000478 <GPIO_Init>:
 *	@brief	GPIO peripheral initialization
 *
 *	@param	*pGPIOHandle -> p -> pointer to GPIOHandle address (structure GPIO_Handle_t type)
 *	@return void type
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	uint32_t temp =0; // temp. register
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]

	// automatically enables the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2101      	movs	r1, #1
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff6c 	bl	8000368 <GPIO_PeriClkCtrl>

	// 1 Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){ // <3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	795b      	ldrb	r3, [r3, #5]
 8000494:	2b03      	cmp	r3, #3
 8000496:	d81f      	bhi.n	80004d8 <GPIO_Init+0x60>
		// value equal or less than 3 = non interrupt modes
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	461a      	mov	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	791b      	ldrb	r3, [r3, #4]
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	fa02 f303 	lsl.w	r3, r2, r3
 80004a8:	617b      	str	r3, [r7, #20]
		// 2* pois são 2 bits o MODER
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear bit fields bf setting new value
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	4619      	mov	r1, r3
 80004b6:	2303      	movs	r3, #3
 80004b8:	408b      	lsls	r3, r1
 80004ba:	43db      	mvns	r3, r3
 80004bc:	4619      	mov	r1, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	400a      	ands	r2, r1
 80004c4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	6819      	ldr	r1, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	697a      	ldr	r2, [r7, #20]
 80004d2:	430a      	orrs	r2, r1
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	e0a1      	b.n	800061c <GPIO_Init+0x1a4>
	}else{ // >= 4 INTERRUPT MODES

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	795b      	ldrb	r3, [r3, #5]
 80004dc:	2b04      	cmp	r3, #4
 80004de:	d117      	bne.n	8000510 <GPIO_Init+0x98>
			//1. configure the FTSR Falling Trigger Selecting Register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e0:	4b9d      	ldr	r3, [pc, #628]	; (8000758 <GPIO_Init+0x2e0>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7912      	ldrb	r2, [r2, #4]
 80004e8:	4611      	mov	r1, r2
 80004ea:	2201      	movs	r2, #1
 80004ec:	408a      	lsls	r2, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a99      	ldr	r2, [pc, #612]	; (8000758 <GPIO_Init+0x2e0>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f6:	4b98      	ldr	r3, [pc, #608]	; (8000758 <GPIO_Init+0x2e0>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	43d2      	mvns	r2, r2
 8000506:	4611      	mov	r1, r2
 8000508:	4a93      	ldr	r2, [pc, #588]	; (8000758 <GPIO_Init+0x2e0>)
 800050a:	400b      	ands	r3, r1
 800050c:	6093      	str	r3, [r2, #8]
 800050e:	e035      	b.n	800057c <GPIO_Init+0x104>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	2b05      	cmp	r3, #5
 8000516:	d117      	bne.n	8000548 <GPIO_Init+0xd0>
			//1. configure the RTSR Rising Trigger
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000518:	4b8f      	ldr	r3, [pc, #572]	; (8000758 <GPIO_Init+0x2e0>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7912      	ldrb	r2, [r2, #4]
 8000520:	4611      	mov	r1, r2
 8000522:	2201      	movs	r2, #1
 8000524:	408a      	lsls	r2, r1
 8000526:	4611      	mov	r1, r2
 8000528:	4a8b      	ldr	r2, [pc, #556]	; (8000758 <GPIO_Init+0x2e0>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6093      	str	r3, [r2, #8]
			// Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052e:	4b8a      	ldr	r3, [pc, #552]	; (8000758 <GPIO_Init+0x2e0>)
 8000530:	68db      	ldr	r3, [r3, #12]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7912      	ldrb	r2, [r2, #4]
 8000536:	4611      	mov	r1, r2
 8000538:	2201      	movs	r2, #1
 800053a:	408a      	lsls	r2, r1
 800053c:	43d2      	mvns	r2, r2
 800053e:	4611      	mov	r1, r2
 8000540:	4a85      	ldr	r2, [pc, #532]	; (8000758 <GPIO_Init+0x2e0>)
 8000542:	400b      	ands	r3, r1
 8000544:	60d3      	str	r3, [r2, #12]
 8000546:	e019      	b.n	800057c <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	795b      	ldrb	r3, [r3, #5]
 800054c:	2b06      	cmp	r3, #6
 800054e:	d115      	bne.n	800057c <GPIO_Init+0x104>
			//1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000550:	4b81      	ldr	r3, [pc, #516]	; (8000758 <GPIO_Init+0x2e0>)
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	7912      	ldrb	r2, [r2, #4]
 8000558:	4611      	mov	r1, r2
 800055a:	2201      	movs	r2, #1
 800055c:	408a      	lsls	r2, r1
 800055e:	4611      	mov	r1, r2
 8000560:	4a7d      	ldr	r2, [pc, #500]	; (8000758 <GPIO_Init+0x2e0>)
 8000562:	430b      	orrs	r3, r1
 8000564:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000566:	4b7c      	ldr	r3, [pc, #496]	; (8000758 <GPIO_Init+0x2e0>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	7912      	ldrb	r2, [r2, #4]
 800056e:	4611      	mov	r1, r2
 8000570:	2201      	movs	r2, #1
 8000572:	408a      	lsls	r2, r1
 8000574:	4611      	mov	r1, r2
 8000576:	4a78      	ldr	r2, [pc, #480]	; (8000758 <GPIO_Init+0x2e0>)
 8000578:	430b      	orrs	r3, r1
 800057a:	6093      	str	r3, [r2, #8]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	089b      	lsrs	r3, r3, #2
 8000582:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	f003 0303 	and.w	r3, r3, #3
 800058c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a72      	ldr	r2, [pc, #456]	; (800075c <GPIO_Init+0x2e4>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d024      	beq.n	80005e2 <GPIO_Init+0x16a>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a70      	ldr	r2, [pc, #448]	; (8000760 <GPIO_Init+0x2e8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d01d      	beq.n	80005de <GPIO_Init+0x166>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a6f      	ldr	r2, [pc, #444]	; (8000764 <GPIO_Init+0x2ec>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d016      	beq.n	80005da <GPIO_Init+0x162>
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a6d      	ldr	r2, [pc, #436]	; (8000768 <GPIO_Init+0x2f0>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d00f      	beq.n	80005d6 <GPIO_Init+0x15e>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a6c      	ldr	r2, [pc, #432]	; (800076c <GPIO_Init+0x2f4>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d008      	beq.n	80005d2 <GPIO_Init+0x15a>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a6a      	ldr	r2, [pc, #424]	; (8000770 <GPIO_Init+0x2f8>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d101      	bne.n	80005ce <GPIO_Init+0x156>
 80005ca:	2305      	movs	r3, #5
 80005cc:	e00a      	b.n	80005e4 <GPIO_Init+0x16c>
 80005ce:	2300      	movs	r3, #0
 80005d0:	e008      	b.n	80005e4 <GPIO_Init+0x16c>
 80005d2:	2304      	movs	r3, #4
 80005d4:	e006      	b.n	80005e4 <GPIO_Init+0x16c>
 80005d6:	2303      	movs	r3, #3
 80005d8:	e004      	b.n	80005e4 <GPIO_Init+0x16c>
 80005da:	2302      	movs	r3, #2
 80005dc:	e002      	b.n	80005e4 <GPIO_Init+0x16c>
 80005de:	2301      	movs	r3, #1
 80005e0:	e000      	b.n	80005e4 <GPIO_Init+0x16c>
 80005e2:	2300      	movs	r3, #0
 80005e4:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005e6:	4b63      	ldr	r3, [pc, #396]	; (8000774 <GPIO_Init+0x2fc>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ea:	4a62      	ldr	r2, [pc, #392]	; (8000774 <GPIO_Init+0x2fc>)
 80005ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f0:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 80005f2:	7c7a      	ldrb	r2, [r7, #17]
 80005f4:	7cbb      	ldrb	r3, [r7, #18]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	fa02 f103 	lsl.w	r1, r2, r3
 80005fc:	4a5e      	ldr	r2, [pc, #376]	; (8000778 <GPIO_Init+0x300>)
 80005fe:	7cfb      	ldrb	r3, [r7, #19]
 8000600:	3302      	adds	r3, #2
 8000602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the EXTI interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000606:	4b54      	ldr	r3, [pc, #336]	; (8000758 <GPIO_Init+0x2e0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4611      	mov	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	408a      	lsls	r2, r1
 8000614:	4611      	mov	r1, r2
 8000616:	4a50      	ldr	r2, [pc, #320]	; (8000758 <GPIO_Init+0x2e0>)
 8000618:	430b      	orrs	r3, r1
 800061a:	6013      	str	r3, [r2, #0]
	}

	temp=0;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]

	// 2 Configure Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	799b      	ldrb	r3, [r3, #6]
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear bit fields bf setting new value
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	4619      	mov	r1, r3
 800063e:	2303      	movs	r3, #3
 8000640:	408b      	lsls	r3, r1
 8000642:	43db      	mvns	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	400a      	ands	r2, r1
 800064c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6899      	ldr	r1, [r3, #8]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	430a      	orrs	r2, r1
 800065c:	609a      	str	r2, [r3, #8]

	temp=0;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]

	// 3 Configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	79db      	ldrb	r3, [r3, #7]
 8000666:	461a      	mov	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear bit fields bf setting new value
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68da      	ldr	r2, [r3, #12]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	4619      	mov	r1, r3
 8000680:	2303      	movs	r3, #3
 8000682:	408b      	lsls	r3, r1
 8000684:	43db      	mvns	r3, r3
 8000686:	4619      	mov	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	400a      	ands	r2, r1
 800068e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	68d9      	ldr	r1, [r3, #12]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	430a      	orrs	r2, r1
 800069e:	60da      	str	r2, [r3, #12]

	temp=0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]

	// 4 Configure the OPTYPE
	// This should be set only for output mode OR the structure GPIO_Handle_t must
	// be cleared when initialized
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	7a1b      	ldrb	r3, [r3, #8]
 80006a8:	461a      	mov	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear bit fields bf setting new value
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	2301      	movs	r3, #1
 80006c2:	408b      	lsls	r3, r1
 80006c4:	43db      	mvns	r3, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	400a      	ands	r2, r1
 80006ce:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6859      	ldr	r1, [r3, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	430a      	orrs	r2, r1
 80006de:	605a      	str	r2, [r3, #4]

	temp=0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

	// 5 Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	795b      	ldrb	r3, [r3, #5]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d131      	bne.n	8000750 <GPIO_Init+0x2d8>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	08db      	lsrs	r3, r3, #3
 80006f2:	743b      	strb	r3, [r7, #16]
		//temp1 will find the which AFR to use ([0] or [1]) by:
		//number less than 0 = [0] .. pin 0 to 7 /8 is equal to 0.?
		//number bigger than 1 = [1] .. pin 8 to 16 /8 is equal to 1.? or 2
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	f003 0307 	and.w	r3, r3, #7
 80006fc:	73fb      	strb	r3, [r7, #15]
		//temp2 will find out the number of the field position (pin) by taking the mod by 8
		// 0 mod 8 = 0, 1 mod 8 = 1, 2 mod 8 = 2, 3 mod 8 = 3 ... 7 mod 8 = 7
		// 8 mod 8 = 0, 9 mod 8 = 1, 10 mod 8 = 2, 11 mod 8 = 3 ... 15 mod 8 = 7
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //Clear bit
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	7c3a      	ldrb	r2, [r7, #16]
 8000704:	3208      	adds	r2, #8
 8000706:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	220f      	movs	r2, #15
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	43db      	mvns	r3, r3
 8000716:	4618      	mov	r0, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	7c3a      	ldrb	r2, [r7, #16]
 800071e:	4001      	ands	r1, r0
 8000720:	3208      	adds	r2, #8
 8000722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	7c3a      	ldrb	r2, [r7, #16]
 800072c:	3208      	adds	r2, #8
 800072e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7a5b      	ldrb	r3, [r3, #9]
 8000736:	461a      	mov	r2, r3
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	4618      	mov	r0, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	7c3a      	ldrb	r2, [r7, #16]
 8000748:	4301      	orrs	r1, r0
 800074a:	3208      	adds	r2, #8
 800074c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		//AFRL/AFRH uses 4 bit position to configure each pin, so 4 bits must be set (4*)
	}
}
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40013c00 	.word	0x40013c00
 800075c:	40020000 	.word	0x40020000
 8000760:	40020400 	.word	0x40020400
 8000764:	40020800 	.word	0x40020800
 8000768:	40020c00 	.word	0x40020c00
 800076c:	40021000 	.word	0x40021000
 8000770:	40021c00 	.word	0x40021c00
 8000774:	40023800 	.word	0x40023800
 8000778:	40013800 	.word	0x40013800

0800077c <GPIO_Read>:
 *
 *	@param	*pGPIOx -> pointer to GPIOx address (structure GPIO_RegDef_t type)
 *	@param  PinNumber is 0 to 15 -> macros created: GPIO_PIN_NO_x
 *	@return value can be 0 or 1
 */
uint8_t GPIO_Read (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	// shift value 'Pin Number' times to the right, so it's possible to simple mask and then read LSB
	value = ((uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	691a      	ldr	r2, [r3, #16]
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	fa22 f303 	lsr.w	r3, r2, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]
	return value; // @return = return value can be 0 o 1
 800079a:	7bfb      	ldrb	r3, [r7, #15]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <I2C_PeriClkCtrl>:
 *
 *	@param	*pI2Cx -> pointer to I2Cx address (structure I2C_RegDef_t type)
 *	@param	EnOrDi can be ENABLE or DISABLE
 *	@return void type
 */
void I2C_PeriClkCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d120      	bne.n	80007fc <I2C_PeriClkCtrl+0x54>
		if(pI2Cx == I2C1){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a22      	ldr	r2, [pc, #136]	; (8000848 <I2C_PeriClkCtrl+0xa0>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <I2C_PeriClkCtrl+0x28>
			I2C1_PCLK_EN();
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a21      	ldr	r2, [pc, #132]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 80007c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		} else if (pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 80007ce:	e035      	b.n	800083c <I2C_PeriClkCtrl+0x94>
		} else if (pI2Cx == I2C2){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a1f      	ldr	r2, [pc, #124]	; (8000850 <I2C_PeriClkCtrl+0xa8>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <I2C_PeriClkCtrl+0x3e>
			I2C2_PCLK_EN();
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a1b      	ldr	r2, [pc, #108]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 80007de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007e4:	e02a      	b.n	800083c <I2C_PeriClkCtrl+0x94>
		} else if (pI2Cx == I2C3){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <I2C_PeriClkCtrl+0xac>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d126      	bne.n	800083c <I2C_PeriClkCtrl+0x94>
			I2C3_PCLK_EN();
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a16      	ldr	r2, [pc, #88]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 80007f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007fa:	e01f      	b.n	800083c <I2C_PeriClkCtrl+0x94>
		if(pI2Cx == I2C1){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <I2C_PeriClkCtrl+0xa0>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d106      	bne.n	8000812 <I2C_PeriClkCtrl+0x6a>
			I2C1_PCLK_DI();
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a10      	ldr	r2, [pc, #64]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 800080a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000810:	e014      	b.n	800083c <I2C_PeriClkCtrl+0x94>
		} else if (pI2Cx == I2C2){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <I2C_PeriClkCtrl+0xa8>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <I2C_PeriClkCtrl+0x80>
			I2C2_PCLK_DI();
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a0b      	ldr	r2, [pc, #44]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 8000820:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000826:	e009      	b.n	800083c <I2C_PeriClkCtrl+0x94>
		} else if (pI2Cx == I2C3){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <I2C_PeriClkCtrl+0xac>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d105      	bne.n	800083c <I2C_PeriClkCtrl+0x94>
			I2C3_PCLK_DI();
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a05      	ldr	r2, [pc, #20]	; (800084c <I2C_PeriClkCtrl+0xa4>)
 8000836:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40005400 	.word	0x40005400
 800084c:	40023800 	.word	0x40023800
 8000850:	40005800 	.word	0x40005800
 8000854:	40005c00 	.word	0x40005c00

08000858 <I2C_Init>:
 *	@brief
 *
 *	@param
 *	@return void type
 */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClkCtrl(pI2CHandle->pI2Cx,ENABLE);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff9c 	bl	80007a8 <I2C_PeriClkCtrl>

	//configure the FREQ field of CR2
	tempreg = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000874:	f000 f97c 	bl	8000b70 <RCC_GetPCLK1Value>
 8000878:	4603      	mov	r3, r0
 800087a:	4a56      	ldr	r2, [pc, #344]	; (80009d4 <I2C_Init+0x17c>)
 800087c:	fba2 2303 	umull	r2, r3, r2, r3
 8000880:	0c9b      	lsrs	r3, r3, #18
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	4313      	orrs	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 |=  (tempreg & 0x3F);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	6859      	ldr	r1, [r3, #4]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	430a      	orrs	r2, r1
 800089a:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7a1b      	ldrb	r3, [r3, #8]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14); // must be kept by sw as 1
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	6899      	ldr	r1, [r3, #8]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)	{
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	4a41      	ldr	r2, [pc, #260]	; (80009d8 <I2C_Init+0x180>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d80f      	bhi.n	80008f8 <I2C_Init+0xa0>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 80008d8:	f000 f94a 	bl	8000b70 <RCC_GetPCLK1Value>
 80008dc:	4602      	mov	r2, r0
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e8:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80008ea:	897b      	ldrh	r3, [r7, #10]
 80008ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e02d      	b.n	8000954 <I2C_Init+0xfc>
	}else{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fe:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14); // must be kept by sw as 1
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	895b      	ldrh	r3, [r3, #10]
 8000904:	039b      	lsls	r3, r3, #14
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4313      	orrs	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	895b      	ldrh	r3, [r3, #10]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d10b      	bne.n	800092e <I2C_Init+0xd6>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000916:	f000 f92b 	bl	8000b70 <RCC_GetPCLK1Value>
 800091a:	4601      	mov	r1, r0
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	4613      	mov	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	fbb1 f3f3 	udiv	r3, r1, r3
 800092a:	817b      	strh	r3, [r7, #10]
 800092c:	e00c      	b.n	8000948 <I2C_Init+0xf0>
		}else{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800092e:	f000 f91f 	bl	8000b70 <RCC_GetPCLK1Value>
 8000932:	4601      	mov	r1, r0
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	009a      	lsls	r2, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	fbb1 f3f3 	udiv	r3, r1, r3
 8000946:	817b      	strh	r3, [r7, #10]
		}
	tempreg |= (ccr_value & 0xFFF);
 8000948:	897b      	ldrh	r3, [r7, #10]
 800094a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	4313      	orrs	r3, r2
 8000952:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR |= tempreg;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	69d9      	ldr	r1, [r3, #28]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	430a      	orrs	r2, r1
 8000962:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM){
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <I2C_Init+0x180>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d809      	bhi.n	8000982 <I2C_Init+0x12a>
		//mode is standard mode
		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 800096e:	f000 f8ff 	bl	8000b70 <RCC_GetPCLK1Value>
 8000972:	4603      	mov	r3, r0
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <I2C_Init+0x17c>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	0c9b      	lsrs	r3, r3, #18
 800097c:	3301      	adds	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e00d      	b.n	800099e <I2C_Init+0x146>
	}else{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000982:	f000 f8f5 	bl	8000b70 <RCC_GetPCLK1Value>
 8000986:	4603      	mov	r3, r0
 8000988:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800098c:	fb02 f303 	mul.w	r3, r2, r3
 8000990:	0a5b      	lsrs	r3, r3, #9
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <I2C_Init+0x184>)
 8000994:	fba2 2303 	umull	r2, r3, r2, r3
 8000998:	09db      	lsrs	r3, r3, #7
 800099a:	3301      	adds	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = 0; //Reset value of TRISE is not 0 (0x0002)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	6a19      	ldr	r1, [r3, #32]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	430a      	orrs	r2, r1
 80009b8:	621a      	str	r2, [r3, #32]

	tempreg |= (1 << I2C_SR2_MSL);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->SR2 = tempreg; // Trying to change MSL bit
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	619a      	str	r2, [r3, #24]
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	000186a0 	.word	0x000186a0
 80009dc:	00044b83 	.word	0x00044b83

080009e0 <I2C_MasterSendData>:
 *	@param	Len
 *	@param	SlaveAddr
 *	@param	Sr
 *	@return void type
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f914 	bl	8000c20 <I2C_GenerateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB));
 80009f8:	bf00      	nop
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2101      	movs	r1, #1
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f850 	bl	8000aa6 <I2C_GetFlagStatus>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f6      	beq.n	80009fa <I2C_MasterSendData+0x1a>

	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	78fa      	ldrb	r2, [r7, #3]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f913 	bl	8000c40 <I2C_ExecuteAddressPhaseWrite>

	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR));
 8000a1a:	bf00      	nop
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f83f 	bl	8000aa6 <I2C_GetFlagStatus>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f6      	beq.n	8000a1c <I2C_MasterSendData+0x3c>

	// 5. Clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f000 f91c 	bl	8000c6c <I2C_ClearADDRFlag>

	// 6. Send the data until len becomes 0
	while(Len > 0)
 8000a34:	e014      	b.n	8000a60 <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE)); //Wait till TXE is set
 8000a36:	bf00      	nop
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f831 	bl	8000aa6 <I2C_GetFlagStatus>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f6      	beq.n	8000a38 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
		Len--;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1e7      	bne.n	8000a36 <I2C_MasterSendData+0x56>
	}

	// 7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE));
 8000a66:	bf00      	nop
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f819 	bl	8000aa6 <I2C_GetFlagStatus>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f6      	beq.n	8000a68 <I2C_MasterSendData+0x88>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF));
 8000a7a:	bf00      	nop
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2104      	movs	r1, #4
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f80f 	bl	8000aa6 <I2C_GetFlagStatus>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d0f6      	beq.n	8000a7c <I2C_MasterSendData+0x9c>

	// 8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000a8e:	7e3b      	ldrb	r3, [r7, #24]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d104      	bne.n	8000a9e <I2C_MasterSendData+0xbe>
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 f818 	bl	8000ace <I2C_GenerateStopCondition>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <I2C_GetFlagStatus>:
	}
	return;
}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName){
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	695a      	ldr	r2, [r3, #20]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e000      	b.n	8000ac2 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <I2C_PeripheralControl>:


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d106      	bne.n	8000b0e <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f043 0201 	orr.w	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
		//I2C_AckControl(pI2Cx, ENABLE); //Enable ack, this can not be set before PE = 1
	}else{
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8000b0c:	e005      	b.n	8000b1a <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f023 0201 	bic.w	r2, r3, #1
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <I2C_AckControl>:

void I2C_AckControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == I2C_ACK_ENABLE) {
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d106      	bne.n	8000b46 <I2C_AckControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000b44:	e005      	b.n	8000b52 <I2C_AckControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock (void){
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
	// To be implemented
	return 0;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <RCC_GetPCLK1Value>:




uint32_t RCC_GetPCLK1Value(void){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc,temp,ahbp,apb1;

	// SWS
	clksrc = ((RCC->CFGR >>2) & 0x3);  // Bring those 2 bits to LSB and mask
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <RCC_GetPCLK1Value+0x9c>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0){
 8000b84:	7a7b      	ldrb	r3, [r7, #9]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000; // HSI
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <RCC_GetPCLK1Value+0xa0>)
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	e00b      	b.n	8000ba8 <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 1){
 8000b90:	7a7b      	ldrb	r3, [r7, #9]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d102      	bne.n	8000b9c <RCC_GetPCLK1Value+0x2c>
		SystemClk = XTAL_VALUE; // replace with xtal value (HSE)
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <RCC_GetPCLK1Value+0xa4>)
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	e005      	b.n	8000ba8 <RCC_GetPCLK1Value+0x38>
	} else if(clksrc == 2){
 8000b9c:	7a7b      	ldrb	r3, [r7, #9]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d102      	bne.n	8000ba8 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock (); // To be implemented
 8000ba2:	f7ff ffdc 	bl	8000b5e <RCC_GetPLLOutputClock>
 8000ba6:	60f8      	str	r0, [r7, #12]
	}

	// AHB prescaler
	temp = (RCC->CFGR >> 4) & 0xF; // Bring those 4 bits to LSB and mask
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <RCC_GetPCLK1Value+0x9c>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	f003 030f 	and.w	r3, r3, #15
 8000bb4:	723b      	strb	r3, [r7, #8]
	if(temp <8){
 8000bb6:	7a3b      	ldrb	r3, [r7, #8]
 8000bb8:	2b07      	cmp	r3, #7
 8000bba:	d802      	bhi.n	8000bc2 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	72fb      	strb	r3, [r7, #11]
 8000bc0:	e005      	b.n	8000bce <RCC_GetPCLK1Value+0x5e>
	} else{
		ahbp = AHB_PreScaler[temp-8];
 8000bc2:	7a3b      	ldrb	r3, [r7, #8]
 8000bc4:	3b08      	subs	r3, #8
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <RCC_GetPCLK1Value+0xa8>)
 8000bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bcc:	72fb      	strb	r3, [r7, #11]
	}

	//APB1 prescaler
	temp = (RCC->CFGR >> 10) & 0x7; // Bring those 3 bits to LSB and mask
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <RCC_GetPCLK1Value+0x9c>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	0a9b      	lsrs	r3, r3, #10
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	723b      	strb	r3, [r7, #8]
		if(temp <4){
 8000bdc:	7a3b      	ldrb	r3, [r7, #8]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d802      	bhi.n	8000be8 <RCC_GetPCLK1Value+0x78>
			apb1 = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	72bb      	strb	r3, [r7, #10]
 8000be6:	e004      	b.n	8000bf2 <RCC_GetPCLK1Value+0x82>
		} else{
			apb1 = APB1_PreScaler[temp-4];
 8000be8:	7a3b      	ldrb	r3, [r7, #8]
 8000bea:	3b04      	subs	r3, #4
 8000bec:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <RCC_GetPCLK1Value+0xac>)
 8000bee:	5cd3      	ldrb	r3, [r2, r3]
 8000bf0:	72bb      	strb	r3, [r7, #10]
		}

	pclk1 = (SystemClk / ahbp) / apb1;
 8000bf2:	7afb      	ldrb	r3, [r7, #11]
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bfa:	7abb      	ldrb	r3, [r7, #10]
 8000bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c00:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000c02:	687b      	ldr	r3, [r7, #4]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	00f42400 	.word	0x00f42400
 8000c14:	007a1200 	.word	0x007a1200
 8000c18:	20000020 	.word	0x20000020
 8000c1c:	20000030 	.word	0x20000030

08000c20 <I2C_GenerateStartCondition>:
}


/////////      local

static void  I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START); // 8
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	f023 0301 	bic.w	r3, r3, #1
 8000c58:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000c5a:	78fa      	ldrb	r2, [r7, #3]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	611a      	str	r2, [r3, #16]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <I2C_ClearADDRFlag>:
	pI2Cx->DR = SlaveAddr;

}

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d01f      	beq.n	8000cc2 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7f1b      	ldrb	r3, [r3, #28]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d112      	bne.n	8000cb0 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a1b      	ldr	r3, [r3, #32]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d11f      	bne.n	8000cd2 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_AckControl(pI2CHandle->pI2Cx, DISABLE);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff44 	bl	8000b26 <I2C_AckControl>
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	60fb      	str	r3, [r7, #12]
		//clear the ADDR flag ( read SR1 , read SR2)
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 8000cae:	e010      	b.n	8000cd2 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	60fb      	str	r3, [r7, #12]
}
 8000cc0:	e007      	b.n	8000cd2 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	60fb      	str	r3, [r7, #12]
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <__libc_init_array>:
 8000cdc:	b570      	push	{r4, r5, r6, lr}
 8000cde:	4d0d      	ldr	r5, [pc, #52]	; (8000d14 <__libc_init_array+0x38>)
 8000ce0:	4c0d      	ldr	r4, [pc, #52]	; (8000d18 <__libc_init_array+0x3c>)
 8000ce2:	1b64      	subs	r4, r4, r5
 8000ce4:	10a4      	asrs	r4, r4, #2
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	42a6      	cmp	r6, r4
 8000cea:	d109      	bne.n	8000d00 <__libc_init_array+0x24>
 8000cec:	4d0b      	ldr	r5, [pc, #44]	; (8000d1c <__libc_init_array+0x40>)
 8000cee:	4c0c      	ldr	r4, [pc, #48]	; (8000d20 <__libc_init_array+0x44>)
 8000cf0:	f000 f818 	bl	8000d24 <_init>
 8000cf4:	1b64      	subs	r4, r4, r5
 8000cf6:	10a4      	asrs	r4, r4, #2
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	42a6      	cmp	r6, r4
 8000cfc:	d105      	bne.n	8000d0a <__libc_init_array+0x2e>
 8000cfe:	bd70      	pop	{r4, r5, r6, pc}
 8000d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d04:	4798      	blx	r3
 8000d06:	3601      	adds	r6, #1
 8000d08:	e7ee      	b.n	8000ce8 <__libc_init_array+0xc>
 8000d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d0e:	4798      	blx	r3
 8000d10:	3601      	adds	r6, #1
 8000d12:	e7f2      	b.n	8000cfa <__libc_init_array+0x1e>
 8000d14:	08000d3c 	.word	0x08000d3c
 8000d18:	08000d3c 	.word	0x08000d3c
 8000d1c:	08000d3c 	.word	0x08000d3c
 8000d20:	08000d40 	.word	0x08000d40

08000d24 <_init>:
 8000d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d26:	bf00      	nop
 8000d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2a:	bc08      	pop	{r3}
 8000d2c:	469e      	mov	lr, r3
 8000d2e:	4770      	bx	lr

08000d30 <_fini>:
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	bf00      	nop
 8000d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d36:	bc08      	pop	{r3}
 8000d38:	469e      	mov	lr, r3
 8000d3a:	4770      	bx	lr
